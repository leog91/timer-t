{"version":3,"sources":["utils/utils.js","components/Timer/Timer.js","store/actions/timer.js","store/actions/actionTypes.js","constants/constants.js","components/History/History.js","App.js","serviceWorker.js","store/reducers/timer.js","store/reducers/history.js","index.js","components/History/History.module.css","components/Timer/Timer.module.css"],"names":["calculateInterval","fstTime","sndTime","connect","state","some","timer","actualTime","initialTime","status","dispatch","startTimer","type","Date","getTime","pauseContinueTimer","time","stopTimer","totalTime","elapseTime","date","props","_useState","useState","_useState2","Object","slicedToArray","elapse","setElapsed","useEffect","interval","setInterval","fst","snd","calculateDiff","storedTime","clearInterval","buttonText","button","react_default","a","createElement","className","styles","Button","onClick","Timer","Mine","disabled","toFixed","ldsdualring","timeList","history","Title","Line","map","e","key","Row","Cell","duration","toString","slice","App","components_Timer_Timer","components_History_History","Boolean","window","location","hostname","match","initialState","playing","reducer","arguments","length","undefined","action","objectSpread","concat","toConsumableArray","rootReducer","combineReducers","timerReducer","historyReducer","composeEnhancers","compose","store","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.190cd2d7.chunk.js","sourcesContent":["export const calculateInterval = (fstTime, sndTime) =>\r\n  (sndTime - fstTime) / 1000;\r\n","import React from \"react\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport * as constants from \"./../../constants/constants\";\r\n\r\nimport { calculateInterval } from \"./../../utils/utils\";\r\n\r\nimport {\r\n  startTimer,\r\n  pauseContinueTimer,\r\n  stopTimer\r\n} from \"../../store/actions/index\";\r\n\r\nimport styles from \"./Timer.module.css\";\r\n\r\nconst Timer = props => {\r\n  const [elapse, setElapsed] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      const fst = props.actualTime;\r\n      const snd = new Date().getTime();\r\n\r\n      if (props.status === constants.INITIAL) {\r\n        setElapsed(0);\r\n      } else if (props.status === constants.STARTED) {\r\n        setElapsed(calculateDiff(fst, snd));\r\n      } else if (props.status === constants.PAUSED) {\r\n        setElapsed(props.some.storedTime);\r\n      } else if (props.status === constants.RESUMED) {\r\n        setElapsed(props.some.storedTime + calculateDiff(fst, snd));\r\n      }\r\n    }, 100);\r\n    return () => clearInterval(interval);\r\n  }, [props]);\r\n\r\n  const calculateDiff = (fst, snd) => calculateInterval(fst, snd);\r\n\r\n  const handleStart = () => {\r\n    props.status === \"INITIAL\"\r\n      ? props.startTimer()\r\n      : props.pauseContinueTimer();\r\n  };\r\n\r\n  const handleStop = () => {\r\n    props.stopTimer(elapse.toFixed(1));\r\n  };\r\n\r\n  let buttonText =\r\n    props.status === constants.INITIAL\r\n      ? \"Play\"\r\n      : props.status === constants.PAUSED\r\n      ? \"Resume\"\r\n      : \"Pause\";\r\n\r\n  const button = (\r\n    <button className={styles.Button} onClick={handleStart}>\r\n      {buttonText}\r\n    </button>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <div className={styles.Timer}>\r\n        <span>Timer-t !</span>\r\n      </div>\r\n      <div>\r\n        <div className={styles.Mine}>\r\n          <div>\r\n            {button}\r\n            <button\r\n              disabled={props.status === constants.INITIAL}\r\n              className={styles.Button}\r\n              onClick={handleStop}\r\n            >\r\n              Stop\r\n            </button>\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <div>\r\n              <div className={styles.ldsdualring} />\r\n            </div>\r\n            <h2>{elapse.toFixed(1)}s</h2>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  some: state.timer,\r\n  actualTime: state.timer.initialTime,\r\n  status: state.timer.status\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  startTimer: () => dispatch(startTimer()),\r\n  pauseContinueTimer: () => dispatch(pauseContinueTimer()),\r\n  stopTimer: totalTime => dispatch(stopTimer(totalTime))\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Timer);\r\n","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport const startTimer = () => {\r\n  return {\r\n    type: actionTypes.START_TIMER,\r\n    initialTime: new Date().getTime()\r\n  };\r\n};\r\n\r\nexport const stopTimer = elapseTime => {\r\n  return {\r\n    type: actionTypes.STOP_TIMER,\r\n    date: new Date(),\r\n    elapseTime: elapseTime\r\n  };\r\n};\r\n\r\nexport const resetAllTimers = () => {\r\n  return {\r\n    type: actionTypes.RESET_ALL_TIMERS\r\n  };\r\n};\r\n\r\nexport const pauseContinueTimer = () => {\r\n  return {\r\n    type: actionTypes.PAUSE_CONTINUE_TIMER,\r\n    time: new Date().getTime()\r\n  };\r\n};\r\n","export const START_TIMER = \"START_TIMER\";\r\nexport const STOP_TIMER = \"STOP_TIMER\";\r\nexport const RESET_ALL_TIMERS = \"RESET_ALL_TIMERS\";\r\nexport const PAUSE_CONTINUE_TIMER = \"PAUSE_CONTINUE_TIMER\";\r\n\r\nexport const CLEAR_HISTORY = \"CLEAR_HISTORY\";\r\n","export const INITIAL = \"INITIAL\";\r\nexport const STARTED = \"STARTED\";\r\nexport const PAUSED = \"PAUSED\";\r\nexport const RESUMED = \"RESUMED\";\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport styles from \"./History.module.css\";\r\n\r\nconst History = props => {\r\n  return (\r\n    <div>\r\n      <h2 className={styles.Title}>History</h2>\r\n      <div className={styles.Line} />\r\n      <div>\r\n        {props.timeList.map(e => (\r\n          <div key={e.date} className={styles.Row}>\r\n            <div className={styles.Cell}>{e.duration}s - </div>\r\n            <div className={styles.Cell}>{e.date.toString().slice(0, 24)}</div>\r\n            <div className={styles.Line} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  timeList: state.history\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null\r\n)(History);\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Timer from \"./components/Timer/Timer\";\nimport History from \"./components/History/History\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timer />\n      <History />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from \"./../actions/actionTypes\";\r\nimport * as constants from \"./../../constants/constants\";\r\nimport { calculateInterval } from \"../../utils/utils\";\r\n\r\nconst initialState = {\r\n  initialTime: null,\r\n  playing: false,\r\n  status: constants.INITIAL,\r\n  storedTime: 0\r\n};\r\n\r\nconst pauseContinueTimer = (state, action) => {\r\n  if (state.playing) {\r\n    return {\r\n      ...state,\r\n      playing: false,\r\n      status: constants.PAUSED,\r\n      storedTime:\r\n        state.storedTime + calculateInterval(state.initialTime, action.time),\r\n      initialTime: null\r\n    };\r\n  } else {\r\n    return {\r\n      ...state,\r\n      initialTime: action.time,\r\n      playing: true,\r\n      status: constants.RESUMED\r\n    };\r\n  }\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.START_TIMER:\r\n      return {\r\n        ...state,\r\n        initialTime: action.initialTime,\r\n        playing: true,\r\n        status: constants.STARTED\r\n      };\r\n    case actionTypes.STOP_TIMER:\r\n      return initialState;\r\n\r\n    case actionTypes.RESET_ALL_TIMERS:\r\n      return initialState;\r\n\r\n    case actionTypes.PAUSE_CONTINUE_TIMER:\r\n      return pauseContinueTimer(state, action);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import * as actionTypes from \"./../actions/actionTypes\";\r\n\r\nconst initialState = [];\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.STOP_TIMER:\r\n      return [...state, { date: action.date, duration: action.elapseTime }];\r\n    case actionTypes.CLEAR_HISTORY:\r\n      return initialState;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, compose, combineReducers } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nimport timerReducer from \"./store/reducers/timer\";\nimport historyReducer from \"./store/reducers/history\";\n\nconst rootReducer = combineReducers({\n  timer: timerReducer,\n  history: historyReducer\n});\n\nconst composeEnhancers =\n  process.env.NODE_ENV === \"development\"\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    : null || compose;\n\nconst store = createStore(rootReducer, composeEnhancers());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Row\":\"History_Row__hg7vK\",\"Cell\":\"History_Cell__1oeD4\",\"Line\":\"History_Line__1rVbi\",\"Title\":\"History_Title__gmpng\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Timer\":\"Timer_Timer__3paJ1\",\"Mine\":\"Timer_Mine__1pX_W\",\"Button\":\"Timer_Button__1C0dm\",\"ldsdualring\":\"Timer_ldsdualring__JZadb\"};"],"sourceRoot":""}